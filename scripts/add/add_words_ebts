#!/usr/bin/env python3

"""Find a word in early texts which needs to be added."""

from random import randrange
import pyperclip
from rich import print

from db.db_helpers import get_db_session
from db.models import DpdHeadword
from tools.bjt import make_bjt_text_list
from tools.cst_sc_text_sets import make_cst_text_set, make_sc_text_set
from tools.goldendict_tools import open_in_goldendict_os
from tools.paths import ProjectPaths
from tools.printer import p_green, p_title, p_yes

pth = ProjectPaths()

ebts = [
    "vin1", "vin2", "vin3", "vin4",
    "dn1", "dn2", "dn3",
    "mn1", "mn2", "mn3",
    "sn1", "sn2", "sn3", "sn4", "sn5",
    "an1", "an2", "an3", "an4", "an5",
    "an6", "an7", "an8", "an9", "an10", "an11",
    "kn1", "kn2", "kn3", "kn4", "kn5", 
    "kn6", "kn7", "kn8", "kn9", "kn10",
    "kn11", "kn12", "kn13", "kn14", "kn15",
]

def make_ebt_word_set():
    p_green("all words in ebts")
    cst_text_set = make_cst_text_set(pth, ebts)
    sc_text_set = make_sc_text_set(pth, ebts)
    bjt_text_set: set = make_bjt_text_list(ebts, "set")
    all_words = cst_text_set | sc_text_set | bjt_text_set
    p_yes(len(all_words))
    return all_words


def make_dpd_missing_set():
    p_green("missing words in dpd")
    db_session = get_db_session(pth.dpd_db_path)
    db = db_session.query(DpdHeadword).all()
    missing_words = []
    for i in db:
        if not i.meaning_1 or not i.example_1:
            missing_words.extend(i.inflections_list)
    missing_words = set(missing_words)      
    p_yes(len(missing_words))
    return missing_words

def main():
    p_title("find missing words in ebts")
    ebt_word_set = make_ebt_word_set()
    dpd_missing_words = make_dpd_missing_set()
    
    p_green("missing words in ebts")
    missing_words_in_ebts = ebt_word_set & dpd_missing_words
    p_yes (len(missing_words_in_ebts))

    for missing_word in missing_words_in_ebts:
        open_in_goldendict_os(missing_word)
        pyperclip.copy(missing_word)
        print(missing_word)
        user_input = input()
        if user_input == "x":
            return

if __name__ == "__main__":
    main()


# TODO add all words in compounds once this list is done. 
